---
format:
  pdf:
    keep-tex: true
    indent: false
    include-in-header: 
      text: 
        \addtokomafont{subsection}{\color{blue}\nobreak}
pdf-engine: xelatex
execute: 
  echo: true
  output: true
  warning: false
  error: false
number-sections: false
fig-dpi: 600
highlight-style: zenburn
tab-stop: 4
include-in-header: 
  text: 
    \newcommand{\var}{\mathrm{Var}}
    \newcommand{\cov}{\mathrm{Cov}}
    \newcommand{\R}{\mathbb{R}}
    \newcommand{\B}[1]{\hat{\beta}_{#1}}
    \usepackage{enumitem}
    \usepackage{tikz}
    \usepackage{pgfplots}
    \usepackage{ifthen}
    \usepackage[hang,flushmargin]{footmisc}
    \pgfplotsset{compat=1.18}
    \usetikzlibrary{calc,snakes,arrows,shapes}
editor_options: 
  chunk_output_type: inline
editor: 
  markdown: 
    wrap: 72
---

```{r packages, echo=FALSE}
library(latex2exp)
library(ggplot2)
library(MASS)
library(ISLR2)
library(GauPro)
library(lhs)
library(dplyr)
library(plotly)
library(caret)
```

```{=latex}
\newcommand{\var}{\mathrm{Var}}
\newcommand{\cov}{\mathrm{Cov}}
\newcommand{\R}{\mathbb{R}}
\newcommand{\B}[1]{\hat{\beta}_{#1}}
```
MSSC-6250 \hfill Mark Rapala, Jennifer Sailor, Josh Seidman

Final Project

\hrulefill

\color{blue}

## Actual project work

\color{black}

```{r}
set.seed(6250)

# function from random website: (actually this is just the peaks function in MATLAB LOL) https://www.chebfun.org/docs/guide/guide12.html
peaks = function(x,y) 3*(1-x)^2*exp(-(x^2) - (y+1)^2) - 10*(x/5 - x^3 - y^5)*exp(-x^2-y^2) - 1/3*exp(-(x+1)^2 - y^2)

a = -2; b = 2;

# for plotting the function
x = seq(a, b, by = 0.01)
y = seq(a, b, by = 0.01)
grid = expand.grid(x = x, y = y)
z = with(grid, peaks(grid$x, grid$y))

# for simulating data points
dx = 0.5; dy = 0.5;
X = seq(a+dx, b-dx, by = dx); Y = seq(a+dy, b-dy, by = dy);
grid_points = expand.grid(x = X, y = Y)
E = matrix(runif(nrow(grid_points)*2,-dx,dx), nrow(grid_points), 2)
grid_points = grid_points + E
data = cbind(grid_points[,1],grid_points[,2],
             peaks(grid_points[,1],grid_points[,2]) + matrix(rnorm(nrow(grid_points),0,1),nrow(grid_points),1));


# plotting the surface and the data points
plot_ly() %>%
  add_surface(x = x, y = y, z = matrix(z, nrow = length(x), ncol = length(y), byrow = TRUE), alpha = 0.8) %>%
  add_markers(x = data[,1], y = data[,2], z = data[,3], 
              size = 5, color = I("black"))%>%
  layout(scene = list(aspectmode = "manual", 
                      aspectratio = list(x=1,y=1,z=0.5),
                      camera = list(eye = list(x=-1.3,y=-1.3,z=0.75))))%>%
  hide_guides()
```

```{r}
set.seed(6)
# GPR with no nugget
sim_model = gpkm(X=data[,-3],Z=data[,3], parallel=F, kernel = "Matern52",
                 nug.est = F, nug = 0, nug.min = 0, nug.max = 0)
pred_y = sim_model$predict(data[,-3])

mean((pred_y-peaks(grid_points[,1],grid_points[,2]))^2)

# plot the fitted surface
# for plotting the function
x = seq(a, b, by = 0.01)
y = seq(a, b, by = 0.01)
grid = expand.grid(x = x, y = y)
z = with(grid, sim_model$predict(cbind(grid$x, grid$y)))

# plotting the surface and the data points
plot_ly() %>%
  add_surface(x = x, y = y, z = matrix(z, nrow = length(x), ncol = length(y), byrow = TRUE), alpha = 0.8) %>%
  add_markers(x = data[,1], y = data[,2], z = data[,3], 
              size = 5, color = I("black"))%>%
  # layout(title = 'GP surface with simulated data points') %>%
  layout(scene = list(aspectmode = "manual", 
                      aspectratio = list(x=1,y=1,z=0.5),
                      camera = list(eye = list(x=-1.3,y=-1.3,z=0.75))))%>%
  hide_guides()
```
```{r}
set.seed(6)
# GPR with nugget
sim_model = gpkm(X=data[,-3],Z=data[,3], parallel=F, kernel = "Matern52",
                 nug.est = F, nug = 0.003009843)
pred_y = sim_model$predict(data[,-3])

mean((pred_y-peaks(grid_points[,1],grid_points[,2]))^2)

# plot the fitted surface
# for plotting the function
x = seq(a, b, by = 0.01)
y = seq(a, b, by = 0.01)
grid = expand.grid(x = x, y = y)
z = with(grid, sim_model$predict(cbind(grid$x, grid$y)))

# plotting the surface and the data points
plot_ly() %>%
  add_surface(x = x, y = y, z = matrix(z, nrow = length(x), ncol = length(y), byrow = TRUE), alpha = 0.8) %>%
  add_markers(x = data[,1], y = data[,2], z = data[,3], 
              size = 5, color = I("black"))%>%
  # layout(title = 'GP surface with simulated data points') %>%
  layout(scene = list(aspectmode = "manual", 
                      aspectratio = list(x=1,y=1,z=0.5),
                      camera = list(eye = list(x=-1.3,y=-1.3,z=0.75))))%>%
  hide_guides()
```
```{r}
set.seed(6)
# GPR with nugget Gaussian kernel
sim_model = gpkm(X=data[,-3],Z=data[,3], parallel=F, kernel = "Gaussian",
                 nug.est = T)
pred_y = sim_model$predict(data[,-3])

mean((pred_y-peaks(grid_points[,1],grid_points[,2]))^2)

# plot the fitted surface
# for plotting the function
x = seq(a, b, by = 0.01)
y = seq(a, b, by = 0.01)
grid = expand.grid(x = x, y = y)
z = with(grid, sim_model$predict(cbind(grid$x, grid$y)))

# plotting the surface and the data points
plot_ly() %>%
  add_surface(x = x, y = y, z = matrix(z, nrow = length(x), ncol = length(y), byrow = TRUE), alpha = 0.8) %>%
  add_markers(x = data[,1], y = data[,2], z = data[,3], 
              size = 5, color = I("black"))%>%
  # layout(title = 'GP surface with simulated data points') %>%
  layout(scene = list(aspectmode = "manual", 
                      aspectratio = list(x=1,y=1,z=0.5),
                      camera = list(eye = list(x=-1.3,y=-1.3,z=0.75))))%>%
  hide_guides()
```

```{r}
# KNN (k = 3)
set.seed(6)
data_df <- data.frame(predictor1 = data[,1], predictor2 = data[,2], response = data[,3])

grid <- expand.grid(predictor1 = x, predictor2 = y)
Z <- peaks(grid[,1],grid[,2])

knn_model <- train(response ~ predictor1 + predictor2, data = data_df, 
                   method = "knn",
                   tuneGrid = expand.grid(k = 3)
                   )

# Predict the whole surface
predictions <- predict(knn_model, newdata = grid)

# Results
mse <- mean((predictions - Z)^2)
mae <- mean(abs(predictions - Z))
cat("Mean Squared Error (MSE):", mse, "\n")
cat("Mean Absolute Error (MAE):", mae, "\n")

#Attempt to plot the surface
# Its not pretty
plot_ly() %>%
  add_surface(x = x, y = y, z = matrix(predictions, nrow = length(x), ncol = length(y), byrow = TRUE), alpha = 0.8) %>%
  add_markers(x = data[,1], y = data[,2], z = data[,3], 
              size = 5, color = I("black"))%>%
  # layout(title = 'True surface with KNN Surface') %>%
  layout(scene = list(aspectmode = "manual", 
                      aspectratio = list(x=1,y=1,z=0.5),
                      camera = list(eye = list(x=-1.3,y=-1.3,z=0.75))))%>%
  hide_guides()
```

```{r}
library(gridExtra)
# polynomial regression (d = 4)
set.seed(6)
data_df <- data.frame(predictor1 = data[,1], predictor2 = data[,2], response = data[,3])

grid <- expand.grid(predictor1 = x, predictor2 = y)
Z <- peaks(grid[,1],grid[,2])

results <- data.frame(degree = numeric(), mse = numeric(), mae = numeric())

for (degree in 2:6) {
  poly_reg <- lm(response ~ 
                   poly(predictor1 + predictor2, degree)+ predictor1*predictor2, 
                 data = data_df)
  poly_predict <- predict(poly_reg, newdata = grid)
  
  mse <- mean((poly_predict - Z)^2)
  mae <- mean(abs(poly_predict - Z))
  
  results <- rbind(results, data.frame(degree = degree, mse = mse, mae = mae))
}

plot1<- ggplot(results, aes(x = degree, y = mse)) +
  geom_line() +
  geom_point() +
  labs(x = "Degree", y = "MSE") +
  ggtitle("MSE vs Degree")

plot2 <- ggplot(results, aes(x = degree, y = mae)) +
  geom_line() +
  geom_point() +
  labs(x = "Degree", y = "MAE") +
  ggtitle("MAE vs Degree")

grid.arrange(plot1, plot2, ncol = 2)

poly_reg <- lm(response ~ 
                 poly(predictor1 + predictor2, 4) + predictor1*predictor2,
               data = data_df)
summary(poly_reg)

# Predict the whole surface
poly_predict <- predict(poly_reg, newdata = grid)

mse <- mean((poly_predict - Z)^2)
mae <- mean(abs(poly_predict - Z))

cat("Mean Squared Error (MSE):", mse, "\n")
cat("Mean Absolute Error (MAE):", mae, "\n")

plot_ly() %>%
  add_surface(x = x, y = y, z = matrix(poly_predict, nrow = length(x), ncol = length(y), byrow = TRUE), alpha = 0.8) %>%
  add_markers(x = data[,1], y = data[,2], z = data[,3], 
              size = 5, color = I("black"))%>%
  # layout(title = 'True surface with KNN Surface') %>%
  layout(scene = list(aspectmode = "manual", 
                      aspectratio = list(x=1,y=1,z=0.5),
                      camera = list(eye = list(x=-1.3,y=-1.3,z=0.75))))%>%
  hide_guides()
```